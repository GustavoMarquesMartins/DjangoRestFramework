"""
Django settings for setup project.

Generated by 'django-admin startproject' using Django 3.0.7.

For more information on this file, see
https://docs.djangoproject.com/en/3.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.0/ref/settings/
"""

import os

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = str(os.getenv('SECRET_KEY'))

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = False

# Lista de hosts/domínios que têm permissão para acessar esta API.
ALLOWED_HOSTS = ['localhost', '127.0.0.1'] 

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    
    # meus apps
    'escola',
    'corsheaders',
    'admin_honeypot',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    "corsheaders.middleware.CorsMiddleware",
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'django.middleware.locale.LocaleMiddleware',
]

ROOT_URLCONF = 'setup.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'setup.wsgi.application'

# Database
# https://docs.djangoproject.com/en/3.0/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
    }
}

# Password validation
# https://docs.djangoproject.com/en/3.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/3.0/topics/i18n/

LANGUAGE_CODE = 'pt-br'

TIME_ZONE = 'America/Sao_Paulo'

USE_I18N = True

USE_L10N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.0/howto/static-files/

STATIC_URL = '/static/' 

MEDIA_ROOT = os.path.join(BASE_DIR, 'media_root')

MEDIA_URL = '/media/'

REST_FRAMEWORK = {
    # Define como a versão da API será identificada nas URLs, permitindo múltiplas versões da API.
    'DEFAULT_VERSIONING_CLASS': 'rest_framework.versioning.QueryParameterVersioning',

    # (Desativado) Configura as regras de permissão da API, que determinam quem pode acessar recursos específicos.
    # 'DEFAULT_PERMISSION_CLASSES': [
    #     'rest_framework.permissions.IsAuthenticated', # Exige autenticação
    #     'rest_framework.permissions.DjangoModelPermissions', # Respeita permissões do modelo Django
    # ],

    # Configura a autenticação básica da API, que usa nome de usuário e senha para autenticação.
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework.authentication.BasicAuthentication',
    ],

    # Configura as classes de controle de taxa de requisições da API, que limitam o número de requisições.
    'DEFAULT_THROTTLE_CLASSES': [
        'rest_framework.throttling.AnonRateThrottle' # Limita taxa para usuários anônimos
    ],

    # Define a taxa máxima de requisições permitidas por dia para usuários anônimos, ajudando a prevenir abuso.
    'DEFAULT_THROTTLE_RATES': {
        'anon': '200000/day', # Limita a 20 requisições por dia
    },

    # (Desativado) Configura as classes de parser da API, que interpretam os dados das requisições.
    # 'DEFAULT_PARSER_CLASSES': [
    #     'rest_framework.parsers.JSONParser', # Interpreta dados em formato JSON
    #     'rest_framework_xml.parsers.XMLParser', # Interpreta dados em formato XML
    # ],
    
    # (Desativado) Configura as classes de renderização da API, que formatam os dados das respostas.
    # 'DEFAULT_RENDERER_CLASSES': [
    #     'rest_framework.renderers.JSONRenderer', # Formata respostas em JSON
    #     'rest_framework_xml.renderers.XMLRenderer' # Formata respostas em XML
    # ],
}

# Configura as origens permitidas para requisições CORS, permitindo que a API seja acessada de diferentes domínios.
CORS_ALLOWED_ORIGINS = [
    "http://localhost:3000", # Permite requisições do localhost na porta 3000
]

# (Desativado) Configura o uso do Redis como sistema de cache para melhorar o desempenho da API.
# 'CACHES': {
#     "default": {
#         "BACKEND": "django_redis.cache.RedisCache", # Usa Redis como backend de cache
#         "LOCATION": "redis://localhost:6379/1", # Endereço do servidor Redis
#         "OPTIONS": {
#             "CLIENT_CLASS": "django_redis.client.DefaultClient", # Classe do cliente Redis
#         }
#     }
# }

# Define o mecanismo de armazenamento de sessões para usar o cache, o que pode melhorar a performance e a escalabilidade.
SESSION_ENGINE = "django.contrib.sessions.backends.cache" # Usa o cache para armazenar sessões

# Especifica o alias do cache a ser utilizado pelo mecanismo de sessões, garantindo que as sessões sejam armazenadas no cache correto.
SESSION_CACHE_ALIAS = "default" # Usa o cache padrão para armazenar sessões

# Define o caminho para arquivos de localização (internacionalização), que contêm strings traduzidas para diferentes idiomas.
LOCALE_PATHS = (
 os.path.join(BASE_DIR, 'locale/'), # Caminho para pasta de arquivos de localização
)
